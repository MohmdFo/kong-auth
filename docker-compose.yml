version: '3.8'

services:
  # Kong Gateway
  kong:
    image: kong:3.4
    container_name: kong-gateway
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8006"
      KONG_PROXY_LISTEN: "0.0.0.0:8005"
      KONG_PROXY_ACCESS_LOG_FORMAT: '{"time": "$time_iso8601", "client_ip": "$remote_addr", "method": "$request_method", "uri": "$request_uri", "status": $status, "latency": $request_time, "user_agent": "$http_user_agent"}'
      KONG_ADMIN_ACCESS_LOG_FORMAT: '{"time": "$time_iso8601", "client_ip": "$remote_addr", "method": "$request_method", "uri": "$request_uri", "status": $status, "latency": $request_time}'
    ports:
      - "8005:8005"  # Kong Gateway
      - "8006:8006"  # Kong Admin API
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - kong-network
    restart: unless-stopped

  # Auth Service (FastAPI)
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile.auth
    container_name: kong-auth-service
    environment:
      - KONG_ADMIN_URL=http://kong:8006
      - JWT_EXPIRATION_SECONDS=31536000
      - HOST=0.0.0.0
      - PORT=8000
    ports:
      - "8000:8000"
    depends_on:
      kong:
        condition: service_healthy
    networks:
      - kong-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Sample Service
  sample-service:
    build:
      context: .
      dockerfile: Dockerfile.sample
    container_name: kong-sample-service
    environment:
      - PORT=8001
    ports:
      - "8001:8001"
    networks:
      - kong-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Kong Setup Service (runs once to configure Kong)
  kong-setup:
    build:
      context: .
      dockerfile: Dockerfile.setup
    container_name: kong-setup
    environment:
      - KONG_ADMIN_URL=http://kong:8006
      - SAMPLE_SERVICE_URL=http://sample-service:8001
    depends_on:
      kong:
        condition: service_healthy
      sample-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - kong-network
    restart: "no"
    command: ["python", "kong-setup/setup-kong.py", "--admin-url", "http://kong:8006", "--service-url", "http://sample-service:8001"]

  # Optional: Redis for caching (if needed)
  redis:
    image: redis:7-alpine
    container_name: kong-redis
    ports:
      - "6379:6379"
    networks:
      - kong-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: Nginx for load balancing (if needed)
  nginx:
    image: nginx:alpine
    container_name: kong-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - kong
    networks:
      - kong-network
    restart: unless-stopped
    profiles:
      - production

networks:
  kong-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  kong-data:
    driver: local 