stages:
  - setup
  - test
  - deploy

variables:
  KONG_ADMIN_URL: "http://localhost:8006"
  KONG_GATEWAY_URL: "http://localhost:8005"
  SAMPLE_SERVICE_URL: "http://localhost:8001"
  AUTH_SERVICE_URL: "http://localhost:8000"
  JWT_EXPIRATION_SECONDS: "31536000"

# Cache Python dependencies
cache:
  paths:
    - .venv/
    - __pycache__/
    - *.pyc

# Install dependencies
before_script:
  - python --version
  - pip install -r requirements.txt

# Setup Kong and services
setup_kong:
  stage: setup
  image: python:3.11-slim
  services:
    - name: kong:3.4
      alias: kong
  variables:
    KONG_DATABASE: "off"
    KONG_PROXY_ACCESS_LOG: /dev/stdout
    KONG_ADMIN_ACCESS_LOG: /dev/stdout
    KONG_PROXY_ERROR_LOG: /dev/stderr
    KONG_ADMIN_ERROR_LOG: /dev/stderr
    KONG_ADMIN_LISTEN: "0.0.0.0:8006"
    KONG_PROXY_LISTEN: "0.0.0.0:8005"
  script:
    - echo "üöÄ Setting up Kong..."
    - echo "Waiting for Kong to be ready..."
    - |
      for i in {1..30}; do
        if curl -s http://kong:8006/status > /dev/null; then
          echo "‚úÖ Kong is ready!"
          break
        fi
        echo "‚è≥ Waiting for Kong... ($i/30)"
        sleep 2
      done
    - echo "üì¶ Installing Python dependencies..."
    - pip install -r requirements.txt
    - echo "üîß Setting up Kong configuration..."
    - cd kong-setup
    - python setup-kong.py --admin-url http://kong:8006 --service-url http://sample-service:8001
    - echo "‚úÖ Kong setup completed!"
  artifacts:
    reports:
      junit: kong-setup-report.xml
    expire_in: 1 hour

# Start sample service
start_sample_service:
  stage: setup
  image: python:3.11-slim
  services:
    - name: kong:3.4
      alias: kong
  script:
    - echo "üöÄ Starting sample service..."
    - pip install -r requirements.txt
    - cd kong-setup
    - python sample-service.py &
    - sleep 5
    - echo "‚úÖ Sample service started!"
  artifacts:
    expire_in: 1 hour

# Start auth service
start_auth_service:
  stage: setup
  image: python:3.11-slim
  services:
    - name: kong:3.4
      alias: kong
  script:
    - echo "üöÄ Starting auth service..."
    - pip install -r requirements.txt
    - python run.py &
    - sleep 5
    - echo "‚úÖ Auth service started!"
  artifacts:
    expire_in: 1 hour

# Test the complete flow
test_complete_flow:
  stage: test
  image: python:3.11-slim
  services:
    - name: kong:3.4
      alias: kong
  dependencies:
    - setup_kong
    - start_sample_service
    - start_auth_service
  script:
    - echo "üß™ Running complete flow tests..."
    - pip install -r requirements.txt
    - echo "‚è≥ Waiting for services to be ready..."
    - |
      for i in {1..30}; do
        if curl -s http://localhost:8000/ > /dev/null && curl -s http://localhost:8001/ > /dev/null; then
          echo "‚úÖ All services are ready!"
          break
        fi
        echo "‚è≥ Waiting for services... ($i/30)"
        sleep 2
      done
    - echo "üîç Testing auth service..."
    - curl -s http://localhost:8000/ | jq '.'
    - echo "üîç Testing sample service..."
    - curl -s http://localhost:8001/ | jq '.'
    - echo "üß™ Running complete flow test..."
    - cd kong-setup
    - python test-complete-flow.py
    - echo "‚úÖ All tests passed!"
  artifacts:
    reports:
      junit: test-results.xml
    expire_in: 1 hour

# Test individual endpoints
test_endpoints:
  stage: test
  image: python:3.11-slim
  services:
    - name: kong:3.4
      alias: kong
  dependencies:
    - setup_kong
    - start_sample_service
    - start_auth_service
  script:
    - echo "üß™ Testing individual endpoints..."
    - pip install -r requirements.txt
    - |
      # Wait for services
      for i in {1..30}; do
        if curl -s http://localhost:8000/ > /dev/null; then
          break
        fi
        sleep 2
      done
    - echo "üîê Creating consumer and getting JWT token..."
    - |
      RESPONSE=$(curl -s -X POST "http://localhost:8000/create-consumer" \
        -H "Content-Type: application/json" \
        -d '{"username": "gitlab-test-user", "custom_id": "gitlab-ci-test"}')
    - echo "Response: $RESPONSE"
    - |
      TOKEN=$(echo $RESPONSE | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
      echo "JWT Token: ${TOKEN:0:50}..."
    - echo "üîç Testing protected endpoints..."
    - |
      # Test without token (should fail)
      echo "Testing without token (should fail):"
      curl -s -w "Status: %{http_code}\n" http://localhost:8005/sample/status
    - |
      # Test with valid token
      echo "Testing with valid token:"
      curl -s -H "Authorization: Bearer $TOKEN" \
        http://localhost:8005/sample/status | jq '.'
    - |
      # Test POST endpoint
      echo "Testing POST endpoint:"
      curl -s -X POST \
        -H "Authorization: Bearer $TOKEN" \
        -H "Content-Type: application/json" \
        -d '{"test": "data", "message": "Hello from GitLab CI!"}' \
        http://localhost:8005/sample/api | jq '.'
    - echo "‚úÖ Endpoint tests completed!"
  artifacts:
    reports:
      junit: endpoint-tests.xml
    expire_in: 1 hour

# API documentation test
test_api_docs:
  stage: test
  image: python:3.11-slim
  services:
    - name: kong:3.4
      alias: kong
  dependencies:
    - setup_kong
    - start_sample_service
    - start_auth_service
  script:
    - echo "üìö Testing API documentation examples..."
    - pip install -r requirements.txt
    - |
      # Wait for services
      for i in {1..30}; do
        if curl -s http://localhost:8000/ > /dev/null; then
          break
        fi
        sleep 2
      done
    - echo "üîê Getting JWT token for API docs test..."
    - |
      RESPONSE=$(curl -s -X POST "http://localhost:8000/create-consumer" \
        -H "Content-Type: application/json" \
        -d '{"username": "api-docs-test"}')
      TOKEN=$(echo $RESPONSE | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
    - echo "üß™ Testing API documentation examples..."
    - |
      # Test all endpoints from docs
      echo "1. Testing GET /sample/status:"
      curl -s -H "Authorization: Bearer $TOKEN" \
        http://localhost:8005/sample/status | jq '.'
    - |
      echo "2. Testing POST /sample/api:"
      curl -s -X POST \
        -H "Authorization: Bearer $TOKEN" \
        -H "Content-Type: application/json" \
        -d '{"action": "create", "resource": "user", "data": {"name": "John Doe"}}' \
        http://localhost:8005/sample/api | jq '.'
    - |
      echo "3. Testing GET /sample:"
      curl -s -H "Authorization: Bearer $TOKEN" \
        http://localhost:8005/sample | jq '.'
    - echo "‚úÖ API documentation tests completed!"
  artifacts:
    reports:
      junit: api-docs-tests.xml
    expire_in: 1 hour

# Deploy configuration (example)
deploy_config:
  stage: deploy
  image: python:3.11-slim
  services:
    - name: kong:3.4
      alias: kong
  dependencies:
    - setup_kong
  script:
    - echo "üöÄ Deploying Kong configuration..."
    - pip install -r requirements.txt
    - cd kong-setup
    - python setup-kong.py --admin-url http://kong:8006 --service-url http://sample-service:8001
    - echo "‚úÖ Kong configuration deployed!"
    - echo "üìã Available endpoints:"
    - echo "  - Kong Gateway: http://localhost:8005"
    - echo "  - Kong Admin: http://localhost:8006"
    - echo "  - Protected endpoints:"
    - echo "    - GET/POST http://localhost:8005/sample"
    - echo "    - GET/POST http://localhost:8005/sample/api"
    - echo "    - GET http://localhost:8005/sample/status"
  only:
    - main
    - develop
  artifacts:
    expire_in: 1 week

# Cleanup
cleanup:
  stage: .post
  image: python:3.11-slim
  services:
    - name: kong:3.4
      alias: kong
  script:
    - echo "üßπ Cleaning up Kong configuration..."
    - pip install -r requirements.txt
    - cd kong-setup
    - python setup-kong.py --cleanup --admin-url http://kong:8006
    - echo "‚úÖ Cleanup completed!"
  when: always
  allow_failure: true 